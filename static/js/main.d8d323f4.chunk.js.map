{"version":3,"sources":["Components/TimerButtons.js","Components/LapTimeTable.js","Components/CountdownTimer.js","App.js","serviceWorker.js","index.js"],"names":["TimerButtons","runningLabel","this","props","running","resetLabel","onClick","toggleRunning","onReset","Component","LapTimeTable","rows","lapTimes","map","row","index","key","className","CountdownTimer","console","log","state","addLap","countDown","setState","initialTime","t","formatTime","interval","clearInterval","setInterval","updateTimer","frameRate","worker","postMessage","onmessage","e","message","data","hasOwnProperty","timeLeft","callback","Worker","mins","Math","floor","millis","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAEqBA,E,iLAEb,IAAIC,EAAeC,KAAKC,MAAMC,QAAU,OAAS,QAC7CC,EAAaH,KAAKC,MAAMC,QAAU,MAAQ,QAC9C,OACI,6BACI,4BAAQE,QAASJ,KAAKC,MAAMI,eAAgBN,GAC5C,4BAAQK,QAASJ,KAAKC,MAAMK,SAAUH,Q,GAPZI,aCArBC,E,iLAEb,IAAMC,EAAOT,KAAKC,MAAMS,SAASC,KAAI,SAACC,EAAKC,GAAN,OACjC,wBAAIC,IAAKD,EAAOE,UAAU,WAAU,4BAAKF,GAAW,4BAAKD,OAE7D,OACI,yBAAKG,UAAU,WAAU,+BAAO,+BAC3BN,S,GAPyBF,aCErBS,E,YACjB,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KAaVK,QAAU,WACNW,QAAQC,IAAI,aACR,EAAKC,MAAMjB,QACX,EAAKkB,OAAO,EAAKD,MAAME,WAEvB,EAAKC,SAAS,CACVD,UAAW,EAAKpB,MAAMsB,YACtBb,SAAU,MArBH,EA0BnBU,OAAS,SAACI,GACN,EAAKF,SAAS,CACVZ,SAAS,GAAD,mBAAM,EAAKS,MAAMT,UAAjB,CAA2B,EAAKe,WAAWD,QA5BxC,EAgCnBnB,cAAgB,WACZY,QAAQC,IAAI,cACZ,IAAIQ,EAAW,KACV,EAAKP,MAAMjB,QAGZyB,cAAc,EAAKR,MAAMO,UAFzBA,EAAWE,YAAY,EAAKC,YAAa,EAAKC,WAIlD,EAAKX,MAAMY,OAAOC,YAAY,CAAC,OAAS,EAAKb,MAAMjB,UACnD,EAAKoB,SAAS,CACVpB,SAAU,EAAKiB,MAAMjB,QACrBwB,SAAUA,KA3CC,EA+CnBG,YAAc,WACV,EAAKV,MAAMY,OAAOC,YAAY,CAAC,gBAAkB,KAhDlC,EAmDnBC,UAAY,SAACC,GACT,IAAIC,EAAUD,EAAEE,KACZD,EAAQE,eAAe,cACvB,EAAKf,SAAS,CACVD,UAAYc,EAAQG,WAEC,IAArBH,EAAQG,WACJ,EAAKnB,MAAMjB,SACX,EAAKG,gBAGT,EAAKJ,MAAMsC,cA5DnB,EAAKpB,MAAQ,CACTE,UAAWpB,EAAMsB,YACjBrB,SAAS,EACTwB,SAAU,KACVK,OAAQ,IAAIS,OAAO,qBACnB9B,SAAU,IAEd,EAAKoB,UAAY,GACjB,EAAKX,MAAMY,OAAOE,UAAY,EAAKA,UACnC,EAAKd,MAAMY,OAAOC,YAAY,CAAC,KAAO/B,EAAMsB,cAX7B,E,wEAmERC,GACP,IAAIiB,EAAOC,KAAKC,MAAMnB,EAAI,KAEtBoB,EAASpB,EAAI,IACjB,OAAYiB,EAAO,MAAQ,KAFhBC,KAAKC,OAAOnB,EAAW,IAAPiB,GAAgB,MAELI,OAAO,GAAK,QAAU,MAAQD,GAAQC,OAAO,K,+BAInF,IAAMP,EAAWtC,KAAKmB,MAAME,UAE5B,OACI,6BACI,uBAAGN,UAAU,aACRf,KAAKyB,WAAWa,IAErB,kBAAC,EAAD,CAAcjC,cAAeL,KAAKK,cAAeC,QAASN,KAAKM,QAASJ,QAASF,KAAKmB,MAAMjB,UAC5F,kBAAC,EAAD,CAAcQ,SAAUV,KAAKmB,MAAMT,gB,GApFPH,aCS7BuC,MATf,WACE,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAAlB,SACA,kBAAC,EAAD,CAAgBwB,SAAU,kBAAMtB,QAAQC,IAAI,WAAWK,YAAY,aCIrDwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8d323f4.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TimerButtons extends Component {\n    render() {\n        var runningLabel = this.props.running ? \"Stop\" : \"Start\"\n        var resetLabel = this.props.running ? \"Lap\" : \"Reset\"\n        return (\n            <div>\n                <button onClick={this.props.toggleRunning}>{runningLabel}</button>\n                <button onClick={this.props.onReset}>{resetLabel}</button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class LapTimeTable extends Component {\n    render() {\n        const rows = this.props.lapTimes.map((row, index) => \n            <tr key={index} className=\"lapTime\"><td>{index}</td><td>{row}</td></tr>\n        )\n        return (\n            <div className=\"lapTime\"><table><tbody>\n                {rows}\n            </tbody></table></div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TimerButtons from './TimerButtons'\nimport LapTimeTable from './LapTimeTable'\n\nexport default class CountdownTimer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            countDown: props.initialTime,\n            running: false,\n            interval: null,\n            worker: new Worker('/counterWorker.js'),\n            lapTimes: []\n        }\n        this.frameRate = 40\n        this.state.worker.onmessage = this.onmessage\n        this.state.worker.postMessage({\"time\":props.initialTime})\n    }\n\n    onReset = () => {\n        console.log(\"Reset/Lap\")\n        if (this.state.running) {\n            this.addLap(this.state.countDown)\n        } else {\n            this.setState({\n                countDown: this.props.initialTime,\n                lapTimes: []\n            })\n        }\n    }\n\n    addLap = (t) => {\n        this.setState({\n            lapTimes: [...this.state.lapTimes, this.formatTime(t)]\n        })\n    }\n\n    toggleRunning = () => {\n        console.log(\"Start/Stop\")\n        var interval = null\n        if (!this.state.running) {\n            interval = setInterval(this.updateTimer, this.frameRate)\n        } else {\n            clearInterval(this.state.interval)\n        }\n        this.state.worker.postMessage({\"start\":!this.state.running})\n        this.setState({\n            running: !this.state.running,\n            interval: interval\n        })\n    }\n\n    updateTimer = () => {\n        this.state.worker.postMessage({\"getCurrentTime\": true})\n    }\n\n    onmessage = (e) => {\n        var message = e.data\n        if (message.hasOwnProperty(\"timeLeft\")) {\n            this.setState({\n                countDown : message.timeLeft\n            })\n            if (message.timeLeft === 0) {\n                if (this.state.running) {\n                    this.toggleRunning()\n                }\n                //this.state.worker.terminate()\n                this.props.callback()\n            }\n        }\n    }\n\n    formatTime(t) {\n        var mins = Math.floor(t / 60000)\n        var secs = Math.floor((t - mins * 60000) / 1000)\n        var millis = t % 1000\n        return \"\" + mins + \"m \" + (\"00\"+secs).slice(-2) + \"s . \" + (\"000\" + millis).slice(-3)\n    }\n    \n    render() {\n        const timeLeft = this.state.countDown\n        \n        return (\n            <div>\n                <p className=\"countdown\">\n                    {this.formatTime(timeLeft)}\n                </p>\n                <TimerButtons toggleRunning={this.toggleRunning} onReset={this.onReset} running={this.state.running} />\n                <LapTimeTable lapTimes={this.state.lapTimes} />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport CountdownTimer from './Components/CountdownTimer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Hello</header>\n      <CountdownTimer callback={() => console.log(\"hooray\")} initialTime=\"300000\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}